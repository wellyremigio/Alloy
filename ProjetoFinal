module projeto

/* 

Cada nó possui um conjunto de nós para os quais ele tem uma aresta de saída*/

sig Node {

	adj : set Node

}

/*

O grafo é não-direcionado, assim todas as arestas são simétricas

*/
//OK
pred undirected[a,b: Node] {
    a in b.adj and b in a.adj
}

/*

O grafo é orientado, assim nenhuma aresta é simétrica

*/

//OK
pred oriented[a,b: Node] {
    a in b.adj => b not in a.adj
}

/*

O grafo não contém ciclos

*/
//OK
pred acyclic[n:Node] {
    all n: Node |n not in n.^adj  
}

/*

O grafo é completo, com todos os nós conectados a todos os outros

*/
//OK
pred complete[a, b:Node] {
    a != b implies a in b.adj and noLoops[a] and noLoops[b]
}

/*

Nenhum nó possui aresta para ele mesmo

*/
//OK
pred noLoops[n: Node] {
    n not in n.adj
}

/*

O grafo é fortemente conectado, a partir de qualquer nó pode se chegar a qualquer outro*/
//OK
pred stronglyConnected[a,b: Node] {
    a != b implies (a in b.^adj or b in a.^adj) and undirected[a,b]
}

/*

O grafo é transitivo, se dois nós são conectados através de um terceiro, os dois são ligados diretamente também

*/

pred transitive[a,b,c: Node] {
    (a in b.adj and b in c.adj) implies a in c.adj
}

/* crie fatos combinando alguns dos predicados */

fact {
   
    //Done
    //all a,b: Node | undirected[a,b]
    //all a,b: Node | oriented[a,b]
    //all n: Node | acyclic[n]
    //all a,b: Node | complete[a,b] 
    //all n: Node | noLoops[n]
    //all a,b: Node | stronglyConnected[a,b]
     //all a,b,c: Node | transitive[a,b,c]

}

/* para rodar o fato */

run {}

run undirected for 5

run oriented for 5

run acyclic for 5

run complete for 5

run noLoops for 5

run stronglyConnected for 5

run transitive for 5
