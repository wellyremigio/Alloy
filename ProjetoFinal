module projeto

/* 

Cada nó possui um conjunto de nós para os quais ele tem uma aresta de saída*/

sig Node {

	adj : set Node

}



/*

O grafo é não-direcionado, assim todas as arestas são simétricas

*/
//OK
pred undirected[n:Node] {
    //no n1, n2: Node |   (n1 in n2.adj) => not (n2 in n1.adj)
    all a,b: Node | a in b.adj and b in a.adj
}
run undirected for 5





/*

O grafo é orientado, assim nenhuma aresta é simétrica

*/

//OK
pred oriented[n: Node] {
    all a,b: Node | a in b.adj => b not in a.adj
   //all n1, n2: n | (n1 not in n2.adj) => (n2 not in n1.adj)
}
run oriented for 5


/*

O grafo não contém ciclos

*/
//OK
pred acyclic[n:Node] {
    all n: Node |n not in n.^adj  
}
//run acyclic for 5



/*

O grafo é completo, com todos os nós conectados a todos os outros

*/

pred complete[n:Node] {
   
}



/*

Nenhum nó possui aresta para ele mesmo

*/
//OK
pred noLoops[n: Node] {
    n not in n.^adj
}


/*

O grafo é fortemente conectado, a partir de qualquer nó pode se chegar a qualquer outro*/

pred stronglyConnected[n: Node] {
    n in n.^adj and undirected[n]
}




/*

O grafo é transitivo, se dois nós são conectados através de um terceiro, os dois são ligados diretamente também

*/

pred transitive[n: Node] {
    all a,b,c: Node | a in b.adj and b in c.adj and a in c.adj and not acyclic[n]
}
run transitive for 5

//A -> B in r and B - > C in r implies A -> C in r



/* crie fatos combinando alguns dos predicados */

fact {
    
    
    all n: Node | transitive[n]


    //Done
    // all n: Node | oriented[n]
    //all n: Node | undirected[n]
    //all n: Node | acyclic[n]
    //all n: Node | noLoops[n]

}

/* para rodar o fato */

run {}

run undirected for 5

run oriented for 5

run acyclic for 5

run complete for 5

run noLoops for 5

run stronglyConnected for 5

run transitive for 5
